--1.学生表
Student(S#,Sname,Sage,Ssex) 

--S# 学生编号,Sname 学生姓名,Sage 出生年月,Ssex 学生性别



--2.课程表 
Course(C#,Cname,T#) 

--C# --课程编号,Cname 课程名称,T# 教师编号


--3.教师表 
Teacher(T#,Tname)

 --T# 教师编号,Tname 教师姓名


--4.成绩表 
SC(S#,C#,score)

 --S# 学生编号,C# 课程编号,score 分数



创建测试数据



--学生表 Student

create table Student(S# varchar(10),Sname nvarchar(10),Sage date,Ssex nvarchar(10));
insert into Student values('01' , '赵雷' , '1990-01-01' , '男');
insert into Student values('02' , '钱电' , '1990-12-21' , '男');
insert into Student values('03' , '孙风' , '1990-05-20' , '男');
insert into Student values('04' , '李云' , '1990-08-06' , '男');
insert into Student values('05' , '周梅' , '1991-12-01' , '女');
insert into Student values('06' , '吴兰' , '1992-03-01' , '女');
insert into Student values('07' , '郑竹' , '1989-07-01' , '女');
insert into Student values('08' , '王菊' , '1990-01-20' , '女');



--科目表 Course
create table Course(Cnum varchar(10),Cname varchar(10),Tnum varchar(10));
insert into Course values('01' , '语文' , '02');
insert into Course values('02' , '数学' , '01');
insert into Course values('03' , '英语' , '03');



--教师表 Teacher
create table Teacher(Tnum varchar(10),Tname varchar(10));
insert into Teacher values('01' , '张三');
insert into Teacher values('02' , '李四');
insert into Teacher values('03' , '王五');



--成绩表 SC
create table SC(Snum varchar(10),Cnum varchar(10),score decimal(18,1));
insert into SC values('01' , '01' , 80);
insert into SC values('01' , '02' , 90);
insert into SC values('01' , '03' , 99);
insert into SC values('02' , '01' , 70);
insert into SC values('02' , '02' , 60);
insert into SC values('02' , '03' , 80);
insert into SC values('03' , '01' , 80);
insert into SC values('03' , '02' , 80);
insert into SC values('03' , '03' , 80);
insert into SC values('04' , '01' , 50);
insert into SC values('04' , '02' , 30);
insert into SC values('04' , '03' , 20);
insert into SC values('05' , '01' , 76);
insert into SC values('05' , '02' , 87);
insert into SC values('06' , '01' , 31);
insert into SC values('06' , '03' , 34);
insert into SC values('07' , '02' , 89);
insert into SC values('07' , '03' , 98);



５０道练习题



1. 查询" 01 "课程比" 02 "课程成绩高的学生的信息及课程分数

-- 1.1 查询同时存在" 01 "课程和" 02 "课程的情况
SELECT sc1.Snum, sc1.Cnum AS c01, sc1.score AS score01, sc2.Cnum AS c02, sc2.score AS score02 FROM sc sc1
JOIN sc sc2 
ON sc1.Snum = sc2.Snum AND sc1.Cnum=01 AND sc2.Cnum=02;

-- 1.2 查询存在" 01 "课程但可能不存在" 02 "课程的情况(不存在时显示为 null )

SELECT * FROM 
(SELECT * FROM sc WHERE cnum=01) a
LEFT JOIN sc b
ON a.Snum = b.Snum AND b.Cnum=02;

-- 1.3 查询不存在" 01 "课程但存在" 02 "课程的情况
-- 选出没有课程01的学生编号，再JOIN
SELECT * FROM sc a
JOIN sc b
ON a.Snum = b.Snum AND b.Cnum=02
WHERE a.Snum not in (SELECT Snum FROM sc WHERE Cnum=01);
-- 解法2
SELECT * FROM sc a WHERE a.Snum not in (SELECT Snum FROM sc WHERE Cnum=01) AND Cnum=02;	

2. 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩
SELECT a.Snum, a.Sname, b.avg_score FROM student a
INNER JOIN
	(SELECT Snum, AVG(score) avg_score FROM sc
	GROUP BY Snum
	HAVING AVG(score)>=60) b
ON a.Snum = b.Snum;

3. 查询在 SC 表存在成绩的学生信息
SELECT * FROM student WHERE Snum IN
(SELECT DISTINCT a.Snum FROM sc a);
--解法2, 不标准,group by 在MySQL中优化返回分组的第一个
SELECT a.*
FROM student a
JOIN sc b
ON a.Snum = b.Snum
GROUP BY a.Snum;


4. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )
WITH b AS 
				(SELECT Snum, COUNT(Cnum) course_count, SUM(score) total_score
				FROM sc 
				GROUP BY Snum),
		 a AS
				(SELECT * FROM student)
SELECT a.Snum, a.Sname, course_count,total_score FROM a
LEFT JOIN b 
on a.Snum=b.Snum;
-- 解法2
SELECT a.Snum, a.Sname, COUNT(b.Cnum) course_count,SUM(b.score) total_score FROM student a
LEFT JOIN sc b 
on a.Snum=b.Snum
GROUP BY b.snum;

4.1 查有成绩的学生信息


5. 查询「李」姓老师的数量 
SELECT COUNT(*) FROM teacher WHERE Tname LIKE '李%';

6. 查询学过「张三」老师授课的同学的信息 

WITH num AS 
        (SELECT Snum FROM sc WHERE Cnum = 
				(SELECT c.Cnum FROM teacher t 
				JOIN course c
				ON t.Tnum = c.Tnum
				WHERE t.Tname='张三') )
SELECT * FROM student s WHERE s.Snum IN (SELECT * FROM num)

SELECT * FROM student s WHERE s.Snum IN (
				(SELECT Snum FROM sc WHERE Cnum = 
				(SELECT c.Cnum FROM teacher t 
				JOIN course c
				ON t.Tnum = c.Tnum
				WHERE t.Tname='张三') ))
7. 查询没有学全所有课程的同学的信息 
WITH t AS 
		(SELECT 	s.Snum, COUNT(s.Cnum) AS course_count FROM course c
		RIGHT JOIN sc s
		ON c.Cnum = s.Cnum 
		GROUP BY s.Snum
		HAVING course_count < (SELECT COUNT(*) FROM course))
SELECT * FROM student s WHERE s.Snum IN (SELECT Snum FROM t)
UNION 
SELECT * FROM student s WHERE s.Snum NOT IN (SELECT sc.Snum FROM sc)

8. 查询至少有一门课与学号为" 01 "的同学所学相同的同学的信息 

SELECT DISTINCT s.* FROM student s JOIN
(SELECT DISTINCT a.Snum FROM sc a 
JOIN sc b
ON a.Cnum = b.Cnum AND b.Snum=01)t
ON s.Snum = t.Snum;

9. 查询和" 01 "号的同学学习的课程完全相同的其他同学的信息
SELECT * ,count(*) FROM student s JOIN(
SELECT a.Snum from sc a JOIN
(SELECT Cnum FROM sc WHERE Snum=01) t
on a.Cnum = t.Cnum) t
ON s.Snum=t.Snum
GROUP BY s.Snum 
HAVING COUNT(s.Snum) = (SELECT COUNT(Cnum) FROM sc WHERE Snum=01) 

10. 查询没学过"张三"老师讲授的任一门课程的学生姓名 （取反思维）
SELECT * FROM student s WHERE s.Snum NOT IN
(SELECT Snum FROM sc JOIN 
(SELECT Cnum FROM teacher t 
JOIN course c ON t.Tnum=c.Tnum
WHERE Tname='张三')t
ON sc.Cnum = t.Cnum) 


11. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩 
SELECT * FROM student s JOIN
(SELECT a.Snum Sn, AVG(score) avg_score, count(*) fail_num FROM sc a 
WHERE a.score<60
GROUP BY a.Snum
HAVING fail_num >= 2)t
ON s.Snum = t.Sn

12. 检索" 01 "课程分数小于 60，按分数降序排列的学生信息
SELECT * FROM student s JOIN
(SELECT * FROM sc WHERE Cnum=01 AND score<60) t
ON s.Snum = t.Snum
ORDER BY score DESC

13. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩
SELECT a.*, avg_score FROM sc a JOIN 
(SELECT b.*,AVG(b.score) avg_score FROM sc b
GROUP BY b.Snum) t
ON a.Snum=t.Snum
ORDER BY avg_score DESC

14. 查询各科成绩最高分、最低分和平均分：

    以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
    及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90
    要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列

SELECT Cnum, MAX(score) hscore, MIN(score) lscore, AVG(score) avg_score,
		SUM(CASE WHEN  score>=60 THEN 1 ELSE 0 END) / COUNT(*)  passRate,
		SUM(CASE WHEN  score>=70 AND score<80 THEN 1 ELSE 0 END) / COUNT(*)  middleRate,
		SUM(CASE WHEN  score>=80 AND score<90 THEN 1 ELSE 0 END) / COUNT(*)  niceRate,
    SUM(CASE WHEN  score>=90 THEN 1 ELSE 0 END) / COUNT(*)  legendRate,
		count(Snum) student_num
FROM sc 
GROUP BY Cnum 
ORDER BY student_num DESC, Cnum

15. 按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺

SELECT Snum, Cnum, score,
@rank := @rank + 1 AS rn
FROM sc, (SELECT @rank:=0) a
ORDER BY score DESC

15.1 按各科成绩进行排序，并显示排名， Score 重复时合并名次

SELECT Snum, Cnum, score,
CASE 
WHEN @sco=score THEN @rank 
WHEN @sco:=score THEN @rank:= @rank + 1 
END AS rn
FROM sc, (SELECT @rank:=0, @sco:=NULL) a
ORDER BY score DESC

16.  查询学生的总成绩，并进行排名，总分重复时保留名次空缺
SELECT a.*,
			 @rank:=if(@sco=total,'',@rank+1) as rn,
			 @sco := total
FROM
(SELECT Snum,SUM(score) total
FROM sc
GROUP BY Snum 
ORDER BY total DESC) a,
(SELECT @sco:=NULL, @rank:=0) b;


16.1 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺


17. 统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比
SELECT sc.Cnum,Cname,count(Snum) renshu,
	 SUM(CASE WHEN score<100 and score>85 THEN 1 ELSE 0 END) AS s,
	 CONCAT(SUM(CASE WHEN score<100 and score>85 THEN 1 ELSE 0 END)/count(Snum)*100,"%") AS sRate,
	 SUM(CASE WHEN score<85 and score>70 THEN 1 ELSE 0 END) AS n,
	 CONCAT(SUM(CASE WHEN score<85 and score>70 THEN 1 ELSE 0 END)/count(Snum)*100,"%")  AS nRate,
   SUM(CASE WHEN score<70 and score>60 THEN 1 ELSE 0 END) AS p,
	 CONCAT(SUM(CASE WHEN score<70 and score>60 THEN 1 ELSE 0 END)/count(Snum)*100,"%")  AS pRate,
   SUM(CASE WHEN score<60 and score>0 THEN 1 ELSE 0 END) AS f,
	 CONCAT(SUM(CASE WHEN score<60 and score>0 THEN 1 ELSE 0 END)/count(Snum)*100,"%")  AS fRate
FROM sc 
JOIN course c
on sc.Cnum = c.Cnum
GROUP BY Cnum

18. 查询各科成绩前三名的记录, b有多少成绩大于a成绩,这个成绩数量小于3就是说明是前3

SELECT * FROM sc a
WHERE
(SELECT Count(*) FROM sc b WHERE a.Cnum = b.Cnum AND a.score < b.score)<3;
19. 查询每门课程被选修的学生数 

20. 查询出只选修两门课程的学生学号和姓名 

21. 查询男生、女生人数

22. 查询名字中含有「风」字的学生信息

23. 查询同名同性学生名单，并统计同名人数

24. 查询 1990 年出生的学生名单

25. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列

26. 查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩 

27. 查询课程名称为「数学」，且分数低于 60 的学生姓名和分数 

28. 查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）

29. 查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数

30. 查询不及格的课程

31. 查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名

32. 求每门课程的学生人数 

33. 成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩

34. 成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩

35. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩 

36. 查询每门功成绩最好的前两名

37. 统计每门课程的学生选修人数（超过 5 人的课程才统计）。

38. 检索至少选修两门课程的学生学号 

39. 查询选修了全部课程的学生信息

40. 查询各学生的年龄，只按年份来算 

41. 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一

42. 查询本周过生日的学生

43. 查询下周过生日的学生

44. 查询本月过生日的学生

45. 查询下月过生日的学生
